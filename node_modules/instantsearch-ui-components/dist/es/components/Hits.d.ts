import type { ComponentProps, Renderer } from '../types';
type Hit = Record<string, unknown> & {
    objectID: string;
};
type SendEventForHits = (...props: unknown[]) => void;
export type HitsProps<THit> = ComponentProps<'div'> & {
    hits: THit[];
    itemComponent: (props: {
        hit: THit;
        index: number;
        className: string;
        onClick: () => void;
        onAuxClick: () => void;
    }) => JSX.Element;
    sendEvent: SendEventForHits;
    classNames?: Partial<HitsClassNames>;
    emptyComponent?: (props: {
        className: string;
    }) => JSX.Element;
};
export type HitsClassNames = {
    /**
     * Class names to apply to the root element
     */
    root: string | string[];
    /**
     * Class names to apply to the root element without results
     */
    emptyRoot: string | string[];
    /**
     * Class names to apply to the list element
     */
    list: string | string[];
    /**
     * Class names to apply to each item element
     */
    item: string | string[];
};
export declare function createHitsComponent({ createElement }: Renderer): <THit extends Hit>(userProps: HitsProps<THit>) => JSX.Element;
export {};
